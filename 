[1mdiff --git a/CatHerder.Test/CatHerder.Test.csproj b/CatHerder.Test/CatHerder.Test.csproj[m
[1mindex a886b8d..e43b0ac 100644[m
[1m--- a/CatHerder.Test/CatHerder.Test.csproj[m
[1m+++ b/CatHerder.Test/CatHerder.Test.csproj[m
[36m@@ -7,7 +7,7 @@[m
   </PropertyGroup>[m
 [m
   <ItemGroup>[m
[31m-    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.3.0" />[m
[32m+[m[32m    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.3.1" />[m
     <PackageReference Include="NUnit" Version="3.13.3" />[m
     <PackageReference Include="NUnit3TestAdapter" Version="4.2.1" />[m
   </ItemGroup>[m
[1mdiff --git a/CatHerder.sln b/CatHerder.sln[m
[1mindex 39c0b54..1e8d5af 100644[m
[1m--- a/CatHerder.sln[m
[1m+++ b/CatHerder.sln[m
[36m@@ -7,11 +7,20 @@[m [mProject("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "CatHerder", "CatHerder\CatH[m
 EndProject[m
 Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Solution Items", "Solution Items", "{1FC407E0-20FF-4092-8D6D-ECC1544288C9}"[m
 	ProjectSection(SolutionItems) = preProject[m
[32m+[m		[32m.gitignore = .gitignore[m
 		LICENSE = LICENSE[m
 		README.md = README.md[m
 	EndProjectSection[m
 EndProject[m
[31m-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CatHerder.Test", "CatHerder.Test\CatHerder.Test.csproj", "{24B73A2E-55F5-4E19-9E1C-C83B212B9C20}"[m
[32m+[m[32mProject("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "CatHerder.Test", "CatHerder.Test\CatHerder.Test.csproj", "{24B73A2E-55F5-4E19-9E1C-C83B212B9C20}"[m
[32m+[m[32mEndProject[m
[32m+[m[32mProject("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = ".github", ".github", "{D8921A4B-C199-43C1-AEC8-0DBF993EA722}"[m
[32m+[m[32mEndProject[m
[32m+[m[32mProject("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "workflows", "workflows", "{2806C571-53C9-4978-A112-E1D14D2E330B}"[m
[32m+[m	[32mProjectSection(SolutionItems) = preProject[m
[32m+[m		[32m.github\workflows\codeql-analysis.yml = .github\workflows\codeql-analysis.yml[m
[32m+[m		[32m.github\workflows\main.yml = .github\workflows\main.yml[m
[32m+[m	[32mEndProjectSection[m
 EndProject[m
 Global[m
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution[m
[36m@@ -31,6 +40,9 @@[m [mGlobal[m
 	GlobalSection(SolutionProperties) = preSolution[m
 		HideSolutionNode = FALSE[m
 	EndGlobalSection[m
[32m+[m	[32mGlobalSection(NestedProjects) = preSolution[m
[32m+[m		[32m{2806C571-53C9-4978-A112-E1D14D2E330B} = {D8921A4B-C199-43C1-AEC8-0DBF993EA722}[m
[32m+[m	[32mEndGlobalSection[m
 	GlobalSection(ExtensibilityGlobals) = postSolution[m
 		SolutionGuid = {1303FC24-D2F7-458C-814A-0A14E88DE6EC}[m
 	EndGlobalSection[m
[1mdiff --git a/CatHerder/Bot.cs b/CatHerder/Bot.cs[m
[1mindex 65d87fe..fac8c1c 100644[m
[1m--- a/CatHerder/Bot.cs[m
[1m+++ b/CatHerder/Bot.cs[m
[36m@@ -1,6 +1,8 @@[m
 ï»¿using Discord;[m
 using Discord.Interactions;[m
 using Discord.WebSocket;[m
[32m+[m[32musing Microsoft.Extensions.Configuration;[m
[32m+[m[32musing Microsoft.Extensions.DependencyInjection;[m
 using System.Reflection;[m
 [m
 namespace CatHerder[m
[36m@@ -55,9 +57,8 @@[m [mnamespace CatHerder[m
             Client.SlashCommandExecuted += Client_SlashCommandExecutedAsync;[m
             Client.GuildAvailable += Client_GuildAvailableAsync;[m
 [m
[31m-            // TODO: Load this from configuraiton or similar[m
             const string ApiKeyName = "DISCORD_APIKEY";[m
[31m-            string? apiKey = Environment.GetEnvironmentVariable(ApiKeyName);[m
[32m+[m[32m            string? apiKey = ServiceProvider.GetService<IConfiguration>()?.GetValue<string>(ApiKeyName);[m
             if (string.IsNullOrWhiteSpace(apiKey))[m
             {[m
                 await LogAsync(new LogMessage(LogSeverity.Critical, "Startup", $"{ApiKeyName} environment variable missing or empty"));[m
[1mdiff --git a/CatHerder/CatHerder.csproj b/CatHerder/CatHerder.csproj[m
[1mindex 546bc8f..a7913aa 100644[m
[1m--- a/CatHerder/CatHerder.csproj[m
[1m+++ b/CatHerder/CatHerder.csproj[m
[36m@@ -6,6 +6,7 @@[m
     <ImplicitUsings>enable</ImplicitUsings>[m
     <Nullable>enable</Nullable>[m
     <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>[m
[32m+[m	[32m<DockerfileRunEnvironmentFiles>.env</DockerfileRunEnvironmentFiles>[m
   </PropertyGroup>[m
 [m
   <ItemGroup>[m
[36m@@ -13,7 +14,9 @@[m
   </ItemGroup>[m
 [m
   <ItemGroup>[m
[31m-    <PackageReference Include="Discord.Net" Version="3.7.2" />[m
[32m+[m[32m    <PackageReference Include="Discord.Net" Version="3.8.0" />[m
[32m+[m[32m    <PackageReference Include="Microsoft.Extensions.Configuration.AzureAppConfiguration" Version="5.1.0" />[m
[32m+[m[32m    <PackageReference Include="Microsoft.Extensions.Configuration.EnvironmentVariables" Version="6.0.1" />[m
     <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="6.0.0" />[m
     <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.17.0" />[m
   </ItemGroup>[m
[1mdiff --git a/CatHerder/Dockerfile b/CatHerder/Dockerfile[m
[1mindex ebb9db5..d958874 100644[m
[1m--- a/CatHerder/Dockerfile[m
[1m+++ b/CatHerder/Dockerfile[m
[36m@@ -4,6 +4,7 @@[m [mFROM mcr.microsoft.com/dotnet/runtime:6.0 AS base[m
 WORKDIR /app[m
 [m
 FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build[m
[32m+[m[32mENV DISCORD_APIKEY=${DISCORD_APIKEY}[m
 WORKDIR /src[m
 COPY ["CatHerder/CatHerder.csproj", "CatHerder/"][m
 RUN dotnet restore "CatHerder/CatHerder.csproj"[m
[1mdiff --git a/CatHerder/Program.cs b/CatHerder/Program.cs[m
[1mindex 91af401..fe78964 100644[m
[1m--- a/CatHerder/Program.cs[m
[1m+++ b/CatHerder/Program.cs[m
[36m@@ -1,17 +1,21 @@[m
 ï»¿using CatHerder;[m
[31m-using Discord;[m
 using Discord.Interactions;[m
 using Discord.WebSocket;[m
[32m+[m[32musing Microsoft.Extensions.Configuration;[m
 using Microsoft.Extensions.DependencyInjection;[m
[31m-using System.Reflection;[m
 [m
 using ServiceProvider serviceProvider = ConfigureServices();[m
 Bot bot = serviceProvider.GetRequiredService<Bot>();[m
[31m-Task.WaitAny(bot.Start(), ReadKeys());[m
[32m+[m[32mTask.WaitAny(bot.Start());[m
 [m
 ServiceProvider ConfigureServices()[m
 {[m
[32m+[m[32m    IConfigurationRoot configurationRoot = new ConfigurationBuilder().AddEnvironmentVariables("")[m
[32m+[m[32m                                                                     // .AddAzureAppConfiguration()[m
[32m+[m[32m                                                                     .Build();[m
     return new ServiceCollection()[m
[32m+[m[32m        // .AddAzureAppConfiguration()[m
[32m+[m[32m        .AddSingleton<IConfiguration>(configurationRoot)[m
         .AddSingleton(sp => new DiscordSocketConfig()[m
         {[m
             GatewayIntents = Bot.Intents[m
[36m@@ -20,13 +24,4 @@[m [mServiceProvider ConfigureServices()[m
         .AddSingleton<InteractionService>()[m
         .AddSingleton<Bot>()[m
         .BuildServiceProvider();[m
[31m-}[m
[31m-[m
[31m-async Task ReadKeys()[m
[31m-{ [m
[31m-    // Reference: https://stackoverflow.com/questions/5891538/listen-for-key-press-in-net-console-app[m
[31m-    while (!Console.KeyAvailable && Console.ReadKey(true).Key != ConsoleKey.Escape)[m
[31m-    {[m
[31m-        await Task.Delay(TimeSpan.FromSeconds(1));[m
[31m-    }[m
 }[m
\ No newline at end of file[m
